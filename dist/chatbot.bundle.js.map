{"version":3,"file":"chatbot.bundle.js","sources":["../src/utils.js","../src/renderer.js","../node_modules/style-inject/dist/style-inject.es.js","../src/chatbot.js"],"sourcesContent":["// src/utils.js\n\n/**\n * Generates a unique session ID.\n * @returns {string} A unique ID.\n */\nexport function generateUniqueId() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n    const r = Math.random() * 16 | 0,\n          v = c === 'x' ? r : (r & 0x3 | 0x8);\n    return v.toString(16);\n  });\n}\n\n/**\n * Stores data in localStorage.\n * @param {string} key - The key to store data under.\n * @param {*} value - The data to store.\n */\nexport function setLocalStorageItem(key, value) {\n  try {\n    localStorage.setItem(key, JSON.stringify(value));\n  } catch (e) {\n    console.warn('Chatbot SDK: localStorage write error:', e);\n  }\n}\n\n/**\n * Retrieves data from localStorage.\n * @param {string} key - The key to retrieve data from.\n * @returns {*} The retrieved data, or null if not found/error.\n */\nexport function getLocalStorageItem(key) {\n  try {\n    const item = localStorage.getItem(key);\n    return item ? JSON.parse(item) : null;\n  } catch (e) {\n    console.warn('Chatbot SDK: localStorage read error:', e);\n    return null;\n  }\n}\n\n/**\n * Basic Markdown parsing for bold, italics, links.\n * This is a simplified parser. For full markdown, consider a tiny library if allowed.\n * @param {string} text - The text to parse.\n * @returns {string} HTML string with basic markdown applied.\n */\nexport function parseMarkdown(text) {\n    if (!text) return '';\n    let html = text;\n\n    // Bold: **text** or __text__\n    html = html.replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>');\n    html = html.replace(/__(.*?)__/g, '<strong>$1</strong>');\n\n    // Italics: *text* or _text_\n    html = html.replace(/\\*(.*?)\\*/g, '<em>$1</em>');\n    html = html.replace(/_(.*?)_/g, '<em>$1</em>');\n\n    // Links: [text](url)\n    html = html.replace(/\\[([^\\]]+)\\]\\(([^)]+)\\)/g, '<a href=\"$2\" target=\"_blank\" rel=\"noopener noreferrer\">$1</a>');\n\n    // Line breaks\n    html = html.replace(/\\n/g, '<br/>');\n\n    return html;\n}\n\n/**\n * Dynamically loads an external script.\n * @param {string} url - The URL of the script.\n * @param {string} id - A unique ID for the script tag.\n * @returns {Promise<void>} A promise that resolves when the script is loaded.\n */\nexport function loadScript(url, id) {\n    return new Promise((resolve, reject) => {\n        if (document.getElementById(id)) {\n            return resolve(); // Already loaded\n        }\n        const script = document.createElement('script');\n        script.id = id;\n        script.src = url;\n        script.async = true;\n        script.onload = () => resolve();\n        script.onerror = () => reject(new Error(`Failed to load script: ${url}`));\n        document.head.appendChild(script);\n    });\n}","// src/renderer.js\nimport { loadScript } from './utils';\n\n/**\n * Renders various message types.\n * @param {object} messageData - The message object from the bot response.\n * @param {string} type - The type of content to render (e.g., 'buttons', 'image', 'video', 'carousel').\n * @param {function} [sendMessageCallback] - Callback for sending messages (e.g., for button clicks).\n * @returns {HTMLElement|null} The created HTML element or null if type is not recognized.\n */\nexport function renderMessage(messageData, type, sendMessageCallback = null) {\n  switch (type) {\n    case 'buttons':\n      return createButtons(messageData.buttons, sendMessageCallback);\n    case 'image':\n      return createImage(messageData.image);\n    case 'video':\n      return createVideo(messageData.video);\n    case 'carousel':\n      return createCarousel(messageData.carousel, sendMessageCallback);\n    default:\n      return null;\n  }\n}\n\n/**\n * Renders custom payload types.\n * @param {object} customPayload - The 'custom' object from the bot response.\n * @param {function} [sendMessageCallback] - Callback for sending messages (e.g., for form submissions).\n * @returns {HTMLElement|null} The created HTML element or null if no custom payload.\n */\nexport function renderCustomPayload(customPayload, sendMessageCallback = null) {\n    if (!customPayload) return null;\n\n    const customContainer = document.createElement('div');\n    customContainer.classList.add('chatbot-custom-payload');\n\n    if (customPayload.locations) {\n        const mapEl = createLocationsMap(customPayload.locations);\n        if (mapEl) customContainer.appendChild(mapEl);\n    }\n    if (customPayload.faq_list) {\n        const faqEl = createFaqList(customPayload.faq_list);\n        if (faqEl) customContainer.appendChild(faqEl);\n    }\n    if (customPayload.table) {\n        const tableEl = createTable(customPayload.table);\n        if (tableEl) customContainer.appendChild(tableEl);\n    }\n    if (customPayload.rating) {\n        const ratingEl = createRating(customPayload.rating, sendMessageCallback);\n        if (ratingEl) customContainer.appendChild(ratingEl);\n    }\n    if (customPayload.forms) {\n        const formEl = createDynamicForm(customPayload.forms, sendMessageCallback);\n        if (formEl) customContainer.appendChild(formEl);\n    }\n\n    return customContainer.children.length > 0 ? customContainer : null;\n}\n\n\n// --- Helper functions for specific message types ---\n\nfunction createButtons(buttons, sendMessageCallback) {\n  if (!buttons || buttons.length === 0) return null;\n  const container = document.createElement('div');\n  container.className = 'chatbot-button-container';\n\n  buttons.forEach(btn => {\n    const button = document.createElement('button');\n    button.textContent = btn.title;\n    if (btn.button_color) {\n        button.style.backgroundColor = btn.button_color;\n        button.style.color = 'white'; // Ensure text is visible\n        button.style.borderColor = btn.button_color;\n    }\n\n    if (btn.payload) {\n      button.addEventListener('click', () => {\n        // Prevent multiple clicks on buttons by disabling them after click\n        container.querySelectorAll('button').forEach(b => b.disabled = true);\n        if (sendMessageCallback) {\n            sendMessageCallback(btn.title, btn.payload);\n        }\n      });\n    } else if (btn.url) {\n      button.addEventListener('click', () => window.open(btn.url, '_blank'));\n    }\n    else if (btn.question){\n      button.addEventListener('click', () => {\n        // Prevent multiple clicks on buttons by disabling them after click\n        container.querySelectorAll('button').forEach(b => b.disabled = true);\n        if (sendMessageCallback) {\n            sendMessageCallback(btn.title, btn.question);\n        }\n      });\n    }\n    container.appendChild(button);\n  });\n  return container;\n}\n\nfunction createImage(imageUrl) {\n  if (!imageUrl) return null;\n  const img = document.createElement('img');\n  img.src = imageUrl;\n  img.className = 'chatbot-image';\n  return img;\n}\n\nfunction createVideo(videoUrl) {\n  if (!videoUrl) return null;\n  const video = document.createElement('video');\n  video.src = videoUrl;\n  video.controls = true;\n  video.className = 'chatbot-video';\n  return video;\n}\n\nfunction createCarousel(carouselItems, sendMessageCallback) {\n  if (!carouselItems || carouselItems.length === 0) return null;\n  const container = document.createElement('div');\n  container.className = 'chatbot-carousel-container';\n\n  carouselItems.forEach(item => {\n    const card = document.createElement('div');\n    card.className = 'chatbot-carousel-card';\n\n    if (item.image_url) {\n      const img = document.createElement('img');\n      img.src = item.image_url;\n      img.className = 'chatbot-carousel-card-image';\n      card.appendChild(img);\n    }\n\n    const content = document.createElement('div');\n    content.className = 'chatbot-carousel-card-content';\n\n    const title = document.createElement('h3');\n    title.className = 'chatbot-carousel-card-title';\n    title.textContent = item.title;\n    content.appendChild(title);\n\n    if (item.subtitle) {\n      const subtitle = document.createElement('p');\n      subtitle.className = 'chatbot-carousel-card-subtitle';\n      subtitle.textContent = item.subtitle;\n      content.appendChild(subtitle);\n    }\n\n    if (item.buttons && item.buttons.length > 0) {\n      const buttonsContainer = createButtons(item.buttons, sendMessageCallback);\n      if (buttonsContainer) content.appendChild(buttonsContainer);\n    }\n    card.appendChild(content);\n    container.appendChild(card);\n  });\n  return container;\n}\nfunction createLocationsMap(locations) {\n  if (!locations || locations.length === 0) return null;\n\n  const locationContainer = document.createElement('div');\n  locationContainer.className = 'chatbot-location-cards';\n\n  locations.forEach(location => {\n    const mapUrl = `https://www.google.com/maps?q=${location.lat},${location.lng}`;\n    const staticMap = `https://maps.googleapis.com/maps/api/staticmap?center=${location.lat},${location.lng}&zoom=14&size=400x200&markers=color:red%7C${location.lat},${location.lng}&key=AIzaSyCYVHw1tnbSZsihFfewNPwvuKc0iXx0ymw`;\n\n    const card = document.createElement('div');\n    card.className = 'chatbot-location-card';\n\n    // Map image\n    const img = document.createElement('img');\n    img.src = staticMap;\n    img.alt = `${location.name} map`;\n    img.className = 'chatbot-location-map';\n    card.appendChild(img);\n\n    // Card body\n    const body = document.createElement('div');\n    body.className = 'chatbot-location-body';\n\n    // Title\n    const title = document.createElement('div');\n    title.className = 'chatbot-location-title';\n    title.textContent = location.name;\n    body.appendChild(title);\n\n    // Address\n    if (location.address) {\n      const address = document.createElement('div');\n      address.className = 'chatbot-location-address';\n      address.textContent = location.address;\n      body.appendChild(address);\n    }\n\n    // Button\n    const button = document.createElement('a');\n    button.href = mapUrl;\n    button.target = '_blank';\n    button.className = 'chatbot-location-button';\n    button.textContent = 'View on Map';\n    body.appendChild(button);\n\n    card.appendChild(body);\n    locationContainer.appendChild(card);\n  });\n\n  return locationContainer;\n}\n\n\n\nfunction createFaqList(faqs) {\n    if (!faqs || faqs.length === 0) return null;\n    const container = document.createElement('div');\n    container.className = 'chatbot-faq-list-container';\n    container.style.marginTop = '10px';\n\n    faqs.forEach((faq, index) => {\n        const item = document.createElement('div');\n        item.className = 'chatbot-faq-item';\n\n        const question = document.createElement('div');\n        question.className = 'chatbot-faq-question';\n        question.textContent = faq.question;\n        item.appendChild(question);\n\n        const answer = document.createElement('div');\n        answer.className = 'chatbot-faq-answer';\n        answer.innerHTML = faq.answer; // Assuming answer can contain HTML/markdown already\n        item.appendChild(answer);\n\n        question.addEventListener('click', () => {\n            item.classList.toggle('expanded');\n        });\n        container.appendChild(item);\n    });\n    return container;\n}\n\nfunction createTable(tableData) {\n    if (!tableData || !tableData.headers || !tableData.rows) return null;\n\n    const container = document.createElement('div');\n    container.className = 'chatbot-table-container';\n\n    const table = document.createElement('table');\n    table.className = 'chatbot-table';\n\n    const thead = document.createElement('thead');\n    const headerRow = document.createElement('tr');\n    tableData.headers.forEach(headerText => {\n        const th = document.createElement('th');\n        th.textContent = headerText;\n        headerRow.appendChild(th);\n    });\n    thead.appendChild(headerRow);\n    table.appendChild(thead);\n\n    const tbody = document.createElement('tbody');\n    tableData.rows.forEach(rowData => {\n        const tr = document.createElement('tr');\n        rowData.forEach(cellData => {\n            const td = document.createElement('td');\n            td.textContent = cellData;\n            tr.appendChild(td);\n        });\n        tbody.appendChild(tr);\n    });\n    table.appendChild(tbody);\n\n    container.appendChild(table);\n    return container;\n}\n\nfunction createRating(ratingData, sendMessageCallback) {\n    if (!ratingData || !ratingData.scale) return null;\n\n    const container = document.createElement('div');\n    container.className = 'chatbot-rating-container';\n\n    const title = document.createElement('div');\n    title.className = 'chatbot-rating-title';\n    title.textContent = ratingData.title || 'Please rate:';\n    container.appendChild(title);\n\n    const starsContainer = document.createElement('div');\n    starsContainer.className = 'chatbot-stars';\n    let selectedRating = 0;\n\n    for (let i = ratingData.scale; i >= 1; i--) {\n        const star = document.createElement('span');\n        star.innerHTML = '&#9733;'; // Unicode star character\n        star.dataset.value = i;\n\n        star.addEventListener('mouseover', () => {\n            starsContainer.querySelectorAll('span').forEach(s => {\n                if (parseInt(s.dataset.value) >= i) {\n                    s.classList.add('hover');\n                } else {\n                    s.classList.remove('hover');\n                }\n            });\n        });\n\n        star.addEventListener('mouseout', () => {\n            starsContainer.querySelectorAll('span').forEach(s => s.classList.remove('hover'));\n        });\n\n        star.addEventListener('click', () => {\n            selectedRating = i;\n            starsContainer.querySelectorAll('span').forEach(s => {\n                if (parseInt(s.dataset.value) <= selectedRating) {\n                    s.classList.add('selected');\n                } else {\n                    s.classList.remove('selected');\n                }\n            });\n            if (sendMessageCallback) {\n                // Send the rating as a payload\n                sendMessageCallback(`Rated ${selectedRating} stars`, `/rate_service{\"rating\":${selectedRating}}`);\n            }\n        });\n        starsContainer.appendChild(star);\n    }\n    container.appendChild(starsContainer);\n    return container;\n}\n\nfunction createDynamicForm(formData, sendMessageCallback) {\n    if (!formData || !formData.fields || !formData.submit_payload) return null;\n\n    const container = document.createElement('div');\n    container.className = 'chatbot-form-container';\n\n    if (formData.title) {\n        const title = document.createElement('div');\n        title.className = 'chatbot-form-title';\n        title.textContent = formData.title;\n        container.appendChild(title);\n    }\n\n    const form = document.createElement('form');\n    form.addEventListener('submit', (e) => {\n        e.preventDefault();\n        const formValues = {};\n        formData.fields.forEach(field => {\n            const input = form.querySelector(`[name=\"${field.field_name}\"]`);\n            if (input) {\n                formValues[field.field_name] = input.value;\n            }\n        });\n\n        if (sendMessageCallback) {\n            // Construct a human-readable message for the user's bubble\n            const userMessageText = `Submitted form: ${Object.entries(formValues).map(([key, value]) => `${key}: ${value}`).join(', ')}`;\n            // Send the payload with form data\n            const submitPayload = `${formData.submit_payload}${JSON.stringify(formValues)}`;\n            sendMessageCallback(userMessageText, submitPayload);\n        }\n        // Optionally disable form after submission to prevent re-submission\n        form.querySelectorAll('input, select, button').forEach(el => el.disabled = true);\n    });\n\n    formData.fields.forEach(field => {\n        const fieldDiv = document.createElement('div');\n        fieldDiv.className = 'chatbot-form-field';\n\n        const label = document.createElement('label');\n        label.textContent = field.label;\n        label.htmlFor = `chatbot-form-${field.field_name}`;\n        fieldDiv.appendChild(label);\n\n        let inputElement;\n        if (field.type === 'select' && field.options) {\n            inputElement = document.createElement('select');\n            field.options.forEach(optionText => {\n                const option = document.createElement('option');\n                option.value = optionText;\n                option.textContent = optionText;\n                inputElement.appendChild(option);\n            });\n        } else {\n            inputElement = document.createElement('input');\n            inputElement.type = field.type;\n        }\n        inputElement.id = `chatbot-form-${field.field_name}`;\n        inputElement.name = field.field_name;\n        inputElement.placeholder = field.placeholder || '';\n        inputElement.required = field.required || false;\n\n        fieldDiv.appendChild(inputElement);\n        form.appendChild(fieldDiv);\n    });\n\n    const submitButton = document.createElement('button');\n    submitButton.type = 'submit';\n    submitButton.className = 'chatbot-form-submit-button';\n    submitButton.textContent = formData.submit_button_text || 'Submit';\n    form.appendChild(submitButton);\n\n    container.appendChild(form);\n    return container;\n}","function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","// src/chatbot.js\nimport './chatbot.css';\nimport { parseMarkdown, generateUniqueId, setLocalStorageItem, getLocalStorageItem } from './utils';\nimport { renderMessage, renderCustomPayload } from './renderer';\n\nclass ChatbotWidget {\n  constructor() {\n    this.config = {};\n    this.isOpen = false;\n    this.sessionId = null;\n    this.messages = [];\n    this.elements = {};\n    this.refreshInterval = null;\n    this.debug = true;\n  }\n\n  log(...args) {\n    if (this.debug) console.log('[Chatbot]', ...args);\n  }\n\n  // --- Configuration & Initialization ---\n  initConfig(apiConfig = {}) {\n    const scriptTag = document.querySelector('script[src*=\"chatbot.bundle.js\"]');\n    let scriptConfig = {};\n\n    if (scriptTag) {\n      const configJson = scriptTag.getAttribute('chatbot-config');\n      if (configJson) {\n        try {\n          scriptConfig = JSON.parse(configJson);\n        } catch (e) {\n          console.error('Chatbot SDK: Invalid JSON in chatbot-config attribute', e);\n        }\n      }\n    }\n\n    this.config = {\n      ...scriptConfig,\n      ...apiConfig\n    };\n\n    // Apply defaults if not set\n    this.config.botUrl = this.config.botUrl || 'http://0.0.0.0:8000/chat';\n    this.config.themeColor = this.config.themeColor || '#020c15ff';\n    this.config.position = this.config.position || 'bottom-right';\n    this.config.botName = this.config.botName || 'Chatbot';\n    this.config.inputPlaceholder = this.config.inputPlaceholder || 'Type your message...';\n    this.config.sendButtonText = this.config.sendButtonText || 'Send';\n  }\n\n  async init() {\n    this.initConfig();\n    await this.loadConfig();\n    this.initSession();  if (document.readyState === 'complete' || document.readyState === 'interactive') {\n    this.createWidgetUI();\n  } else {\n    document.addEventListener('DOMContentLoaded', () => {\n      console.log('DOM fully loaded, creating UI');\n      this.createWidgetUI();\n    });\n  }\n  \n  // Fallback timeout\n  setTimeout(() => {\n    if (!this.elements.container) {\n      console.warn('Fallback UI creation');\n      this.createWidgetUI();\n    }\n  }, 1000);\n\n  }\n\n  async loadConfig() {\n    if (this.config.configApiUrl) {\n      try {\n        this.log('Loading initial config from API');\n        const response = await fetch(`${this.config.configApiUrl}?t=${Date.now()}`);\n        const apiConfig = await response.json();\n        this.mergeConfigs(apiConfig);\n      } catch (error) {\n        this.log('Initial config load failed:', error);\n      }\n    }\n  }\n\n  // --- Dynamic Configuration ---\n  async refreshConfig() {\n    try {\n      this.log('Refreshing configuration...');\n      const response = await fetch(`${this.config.configApiUrl}?t=${Date.now()}`);\n      const newConfig = await response.json();\n      this.mergeConfigs(newConfig);\n      this.applyDynamicStyles();\n      this.updateUIElements();\n      this.log('Configuration refreshed successfully');\n      return true;\n    } catch (error) {\n      this.log('Failed to refresh config:', error);\n      return false;\n    }\n  }\n\n  mergeConfigs(newConfig) {\n    this.config = {\n      ...this.config,\n      ...newConfig,\n      style: {\n        ...(this.config.style || {}),\n        ...(newConfig.style || {})\n      },\n      features: {\n        ...(this.config.features || {}),\n        ...(newConfig.features || {})\n      }\n    };\n    this.log('Merged config:', this.config);\n  }\n\n  applyDynamicStyles() {\n    if (!this.config.style) {\n      this.log('No style configuration found');\n      return;\n    }\n\n    const root = document.documentElement;\n    const { style } = this.config;\n\n    if (style.themeColor) {\n      root.style.setProperty('--chatbot-theme-color', style.themeColor);\n      root.style.setProperty('--chatbot-theme-color-hover', this.adjustColor(style.themeColor, -20));\n    }\n\n    if (style.header?.backgroundColor) {\n      root.style.setProperty('--chatbot-header-bg', style.header.backgroundColor);\n    }\n\n    if (style.header?.textColor) {\n      root.style.setProperty('--chatbot-header-text', style.header.textColor);\n    }\n\n    if (style.bubble?.color) {\n      root.style.setProperty('--chatbot-bubble-color', style.bubble.color);\n    }\n\n    if (style.messages?.userBubbleColor) {\n      root.style.setProperty('--chatbot-user-bubble', style.messages.userBubbleColor);\n    }\n\n    if (style.messages?.botBubbleColor) {\n      root.style.setProperty('--chatbot-bot-bubble', style.messages.botBubbleColor);\n    }\n  }\n\n  adjustColor(color, amount) {\n    return '#' + color.replace(/^#/, '').replace(/../g, colorHex => \n      ('0' + Math.min(255, Math.max(0, parseInt(colorHex, 16) + amount)).toString(16)).slice(-6));\n  }\n\n  // --- UI Management ---\n  createWidgetUI() {\n    console.log('Creating widget UI...'); // Debug 1\n    console.log('Config:', this.config); // Debug 2\n  \n    const container = document.createElement('div');\n    container.id = 'chatbot-widget-container';\n    console.log('Container created:', container); // Debug 3\n\n    container.classList.add(`chatbot-position-${this.config.position}`);\n    container.style.display = 'none';\n    container.style.opacity = '0';\n    \n\n    document.body.appendChild(container);\n    this.elements.container = container;\n    setTimeout(() => {\n        const computedStyle = window.getComputedStyle(this.elements.container);\n        console.log('Computed styles:', {\n            display: computedStyle.display,\n            opacity: computedStyle.opacity,\n            zIndex: computedStyle.zIndex,\n            visibility: computedStyle.visibility\n        });\n        }, 500);\n    // Apply animation settings\n    const animation = this.config.style?.animation || { type: 'fade-in', duration: 300 };\n    if (animation.type) {\n      container.style.transition = `all ${animation.duration}ms ease`;\n    }\n\n    // Create Chat Bubble\n    const bubble = document.createElement('div');\n    bubble.className = 'chatbot-bubble';\n    \n    const bubbleStyle = this.config.style?.bubble || {};\n    bubble.style.width = bubbleStyle.size || '60px';\n    bubble.style.height = bubbleStyle.size || '60px';\n    bubble.style.backgroundColor = bubbleStyle.color || 'var(--chatbot-theme-color)';\n    \n    if (bubbleStyle.icon) {\n      bubble.innerHTML = bubbleStyle.icon.startsWith('http') ? \n        `<img src=\"${bubbleStyle.icon}\" alt=\"Chat\" style=\"width: 70%; height: 70%;\">` : \n        bubbleStyle.icon;\n    } else {\n      bubble.innerHTML = `\n        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"white\">\n          <path d=\"M20 2H4c-1.1 0-2 .9-2 2v18l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-2 12H6v-2h12v2zm0-3H6V9h12v2zm0-3H6V6h12v2z\"/>\n        </svg>\n      `;\n    }\n    \n    bubble.addEventListener('click', () => this.toggleChatWindow());\n    container.appendChild(bubble);\n    this.elements.bubble = bubble;\n\n    // Create Chat Window\n    const windowEl = document.createElement('div');\n    windowEl.className = 'chatbot-window';\n    this.refreshConfig()\n    const headerStyle = this.config.style?.header || {};\n    windowEl.innerHTML = `\n      <div class=\"chatbot-header\" style=\"\n        ${headerStyle.backgroundColor ? `background-color: ${headerStyle.backgroundColor};` : ''}\n        ${headerStyle.textColor ? `color: ${headerStyle.textColor};` : ''}\n      \">\n        ${headerStyle.icon ? \n          `<img src=\"${headerStyle.icon}\" class=\"chatbot-header-icon\" \n            style=\"width: ${headerStyle.iconSize || '30px'}; height: ${headerStyle.iconSize || '30px'};\">` : ''}\n        <span class=\"chatbot-header-title\">${this.config.botName}</span>\n        <button class=\"chatbot-header-close\" style=\"\n          ${headerStyle.textColor ? `color: ${headerStyle.textColor};` : ''}\n        \">&times;</button>\n      </div>\n      <div class=\"chatbot-messages\"></div>\n      <div class=\"chatbot-input-area\">\n        <input type=\"text\" placeholder=\"${this.config.inputPlaceholder}\" />\n        <button class=\"chatbot-send-button\">${this.config.sendButtonText}</button>\n      </div>\n    `;\n\n    container.appendChild(windowEl);\n    this.elements.window = windowEl;\n    this.elements.messagesContainer = windowEl.querySelector('.chatbot-messages');\n    this.elements.inputField = windowEl.querySelector('.chatbot-input-area input');\n    this.elements.sendButton = windowEl.querySelector('.chatbot-input-area button');\n    this.elements.closeButton = windowEl.querySelector('.chatbot-header-close');\n    this.elements.headerTitle = windowEl.querySelector('.chatbot-header-title');\n\n    // Add refresh button\n\n\n    // Event Listeners\n    this.elements.closeButton.addEventListener('click', () => this.toggleChatWindow());\n    this.elements.sendButton.addEventListener('click', () => this.sendMessage());\n    this.elements.inputField.addEventListener('keypress', (e) => {\n      if (e.key === 'Enter') this.sendMessage();\n    });\n\n    // Render messages and show\n    this.messages.forEach(msg => this.displayMessage(msg, false));\n    this.scrollToBottom();\n    this.showWidget();\n\n    // Start auto-refresh if configured\n    if (this.config.autoRefresh) {\n      this.startAutoRefresh(this.config.autoRefreshInterval || 300000);\n    }\n  }\n\n  updateUIElements() {\n    if (this.elements.headerTitle) {\n      this.elements.headerTitle.textContent = this.config.botName;\n    }\n    \n    if (this.elements.inputField) {\n      this.elements.inputField.placeholder = this.config.inputPlaceholder;\n    }\n    \n    if (this.elements.sendButton) {\n      this.elements.sendButton.textContent = this.config.sendButtonText;\n    }\n    \n    if (this.config.style?.bubble?.icon && this.elements.bubble) {\n      this.elements.bubble.innerHTML = this.config.style.bubble.icon;\n    }\n  }\n\n  showWidget() {\n      console.log('Attempting to show widget...'); // Debug 4\n  \n  // Force visibility for debugging\n    this.elements.container.style.display = 'block';\n    this.elements.container.style.opacity = '1';\n    this.elements.container.style.zIndex = '99999';\n    \n    // Original animation code\n    const animation = this.config.style?.animation || { type: 'fade-in', duration: 300 };\n    console.log('Using animation:', animation); // Debug 5\n\n    this.elements.container.style.display = 'block';\n    \n    if (animation.type === 'fade-in') {\n      setTimeout(() => {\n        this.elements.container.style.opacity = '1';\n      }, 50);\n    } else if (animation.type === 'slide-up') {\n      this.elements.container.style.transform = 'translateY(20px)';\n      setTimeout(() => {\n        this.elements.container.style.transition = `all ${animation.duration}ms ease`;\n        this.elements.container.style.opacity = '1';\n        this.elements.container.style.transform = 'translateY(0)';\n      }, 50);\n    } else {\n      this.elements.container.style.opacity = '1';\n    }\n  }\n\n  // --- Auto Refresh ---\n  startAutoRefresh(interval = 300000) {\n    this.stopAutoRefresh();\n    this.refreshInterval = setInterval(() => this.refreshConfig(), interval);\n    this.log(`Started auto-refresh every ${interval/1000} seconds`);\n  }\n\n  stopAutoRefresh() {\n    if (this.refreshInterval) {\n      clearInterval(this.refreshInterval);\n      this.refreshInterval = null;\n    }\n  }\n\n  // --- Session Management ---\n  initSession() {\n    this.sessionId = getLocalStorageItem('chatbot_session_id');\n    if (!this.sessionId) {\n      this.sessionId = generateUniqueId();\n      setLocalStorageItem('chatbot_session_id', this.sessionId);\n    }\n    this.messages = getLocalStorageItem(`chatbot_conversation_${this.sessionId}`) || [];\n  }\n\n  // --- Message Handling ---\n  displayMessage(message, save = true) {\n    const messageElement = document.createElement('div');\n    messageElement.classList.add('chatbot-message', message.sender === 'user' ? 'user' : 'bot');\n\n    if (message.text) {\n      const textContent = document.createElement('div');\n      textContent.innerHTML = parseMarkdown(message.text);\n      messageElement.appendChild(textContent);\n    }\n\n    if (message.buttons?.length > 0) {\n      const buttonContainer = renderMessage(message, 'buttons', this.sendMessage.bind(this));\n      if (buttonContainer) messageElement.appendChild(buttonContainer);\n    }\n    \n    if (message.image) {\n      const imageEl = renderMessage(message, 'image');\n      if (imageEl) messageElement.appendChild(imageEl);\n    }\n    \n    if (message.video) {\n      const videoEl = renderMessage(message, 'video');\n      if (videoEl) messageElement.appendChild(videoEl);\n    }\n    \n    if (message.carousel?.length > 0) {\n      const carouselEl = renderMessage(message, 'carousel', this.sendMessage.bind(this));\n      if (carouselEl) messageElement.appendChild(carouselEl);\n    }\n    \n    if (message.custom) {\n      const customEl = renderCustomPayload(message.custom, this.sendMessage.bind(this));\n      if (customEl) messageElement.appendChild(customEl);\n    }\n\n    this.elements.messagesContainer.appendChild(messageElement);\n    \n    if (save) {\n      this.messages.push(message);\n      setLocalStorageItem(`chatbot_conversation_${this.sessionId}`, this.messages);\n    }\n    \n    this.scrollToBottom();\n  }\n\n  async sendMessage(text = null, payload = null) {\n    let messageText = text || this.elements.inputField.value.trim();\n    if (!messageText && !payload) return;\n\n    const userMessage = { sender: 'user', text: messageText };\n    this.displayMessage(userMessage);\n    this.elements.inputField.value = '';\n\n    const requestBody = {\n      sender: this.sessionId,\n      message: messageText,\n      ...(payload && { customData: { payload } })\n    };\n\n    try {\n      const response = await fetch(this.config.botUrl, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(requestBody),\n      });\n\n      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n\n      const botResponses = await response.json();\n      if (botResponses?.length > 0) {\n        botResponses.forEach(response => this.displayMessage({ sender: 'bot', ...response }));\n      } else {\n        this.displayMessage({ sender: 'bot', text: \"Sorry, I didn't get a response.\" });\n      }\n    } catch (error) {\n      console.error('Chatbot error:', error);\n      this.displayMessage({ \n        sender: 'bot', \n        text: \"I'm having trouble connecting. Please try again later.\" \n      });\n    }\n  }\n\n  // --- UI Controls ---\n  toggleChatWindow() {\n    this.isOpen = !this.isOpen;\n    this.elements.window.classList.toggle('open', this.isOpen);\n    this.elements.bubble.classList.toggle('hidden', this.isOpen);\n    \n    if (this.isOpen) {\n      this.elements.inputField.focus();\n      this.scrollToBottom();\n    }\n  }\n\n  scrollToBottom() {\n    if (this.elements.messagesContainer) {\n      this.elements.messagesContainer.scrollTop = this.elements.messagesContainer.scrollHeight;\n    }\n  }\n}\n\n// Initialize\nwindow.ChatbotSDK = new ChatbotWidget();\nwindow.ChatbotSDK.init();"],"names":["setLocalStorageItem","key","value","localStorage","setItem","JSON","stringify","e","console","warn","getLocalStorageItem","item","getItem","parse","renderMessage","messageData","type","sendMessageCallback","createButtons","buttons","imageUrl","img","document","createElement","src","className","createImage","image","videoUrl","video","controls","createVideo","carouselItems","length","container","forEach","card","image_url","appendChild","content","title","textContent","subtitle","buttonsContainer","createCarousel","carousel","renderCustomPayload","customPayload","customContainer","classList","add","locations","mapEl","locationContainer","location","mapUrl","lat","lng","staticMap","alt","name","body","address","button","href","target","createLocationsMap","faq_list","faqEl","faqs","style","marginTop","faq","index","question","answer","innerHTML","addEventListener","toggle","createFaqList","table","tableEl","tableData","headers","rows","thead","headerRow","headerText","th","tbody","rowData","tr","cellData","td","createTable","rating","ratingEl","ratingData","scale","starsContainer","selectedRating","i","star","dataset","querySelectorAll","s","parseInt","remove","createRating","forms","formEl","formData","fields","submit_payload","form","preventDefault","formValues","field","input","querySelector","field_name","userMessageText","Object","entries","map","join","submitPayload","el","disabled","fieldDiv","label","inputElement","htmlFor","options","optionText","option","id","placeholder","required","submitButton","submit_button_text","createDynamicForm","children","btn","button_color","backgroundColor","color","borderColor","payload","b","url","window","open","css","ref","insertAt","head","getElementsByTagName","firstChild","insertBefore","styleSheet","cssText","createTextNode","ChatbotSDK","constructor","this","config","isOpen","sessionId","messages","elements","refreshInterval","debug","log","args","initConfig","apiConfig","scriptTag","scriptConfig","configJson","getAttribute","error","botUrl","themeColor","position","botName","inputPlaceholder","sendButtonText","init","loadConfig","initSession","readyState","createWidgetUI","setTimeout","configApiUrl","response","fetch","Date","now","json","mergeConfigs","refreshConfig","newConfig","applyDynamicStyles","updateUIElements","features","root","documentElement","setProperty","adjustColor","header","textColor","bubble","userBubbleColor","botBubbleColor","amount","replace","colorHex","Math","min","max","toString","slice","display","opacity","computedStyle","getComputedStyle","zIndex","visibility","animation","duration","transition","bubbleStyle","width","size","height","icon","startsWith","toggleChatWindow","windowEl","headerStyle","iconSize","messagesContainer","inputField","sendButton","closeButton","headerTitle","sendMessage","msg","displayMessage","scrollToBottom","showWidget","autoRefresh","startAutoRefresh","autoRefreshInterval","transform","interval","stopAutoRefresh","setInterval","clearInterval","c","r","random","message","save","messageElement","sender","text","html","parseMarkdown","buttonContainer","bind","imageEl","videoEl","carouselEl","custom","customEl","push","messageText","trim","userMessage","requestBody","customData","method","ok","Error","status","botResponses","focus","scrollTop","scrollHeight"],"mappings":"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"}