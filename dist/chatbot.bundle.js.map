{"version":3,"file":"chatbot.bundle.js","sources":["../src/utils.js","../src/renderer.js","../node_modules/style-inject/dist/style-inject.es.js","../src/chatbot.js"],"sourcesContent":["// src/utils.js\n\n/**\n * Generates a unique session ID.\n * @returns {string} A unique ID.\n */\nexport function generateUniqueId() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n    const r = Math.random() * 16 | 0,\n          v = c === 'x' ? r : (r & 0x3 | 0x8);\n    return v.toString(16);\n  });\n}\n\n/**\n * Stores data in localStorage.\n * @param {string} key - The key to store data under.\n * @param {*} value - The data to store.\n */\nexport function setLocalStorageItem(key, value) {\n  try {\n    localStorage.setItem(key, JSON.stringify(value));\n  } catch (e) {\n    console.warn('Chatbot SDK: localStorage write error:', e);\n  }\n}\n\n/**\n * Retrieves data from localStorage.\n * @param {string} key - The key to retrieve data from.\n * @returns {*} The retrieved data, or null if not found/error.\n */\nexport function getLocalStorageItem(key) {\n  try {\n    const item = localStorage.getItem(key);\n    return item ? JSON.parse(item) : null;\n  } catch (e) {\n    console.warn('Chatbot SDK: localStorage read error:', e);\n    return null;\n  }\n}\n\n/**\n * Basic Markdown parsing for bold, italics, links.\n * This is a simplified parser. For full markdown, consider a tiny library if allowed.\n * @param {string} text - The text to parse.\n * @returns {string} HTML string with basic markdown applied.\n */\nexport function parseMarkdown(text) {\n    if (!text) return '';\n    let html = text;\n\n    // Bold: **text** or __text__\n    html = html.replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>');\n    html = html.replace(/__(.*?)__/g, '<strong>$1</strong>');\n\n    // Italics: *text* or _text_\n    html = html.replace(/\\*(.*?)\\*/g, '<em>$1</em>');\n    html = html.replace(/_(.*?)_/g, '<em>$1</em>');\n\n    // Links: [text](url)\n    html = html.replace(/\\[([^\\]]+)\\]\\(([^)]+)\\)/g, '<a href=\"$2\" target=\"_blank\" rel=\"noopener noreferrer\">$1</a>');\n\n    // Line breaks\n    html = html.replace(/\\n/g, '<br/>');\n\n    return html;\n}\n\n/**\n * Dynamically loads an external script.\n * @param {string} url - The URL of the script.\n * @param {string} id - A unique ID for the script tag.\n * @returns {Promise<void>} A promise that resolves when the script is loaded.\n */\nexport function loadScript(url, id) {\n    return new Promise((resolve, reject) => {\n        if (document.getElementById(id)) {\n            return resolve(); // Already loaded\n        }\n        const script = document.createElement('script');\n        script.id = id;\n        script.src = url;\n        script.async = true;\n        script.onload = () => resolve();\n        script.onerror = () => reject(new Error(`Failed to load script: ${url}`));\n        document.head.appendChild(script);\n    });\n}","// src/renderer.js\nimport { loadScript } from './utils';\n\n/**\n * Renders various message types.\n * @param {object} messageData - The message object from the bot response.\n * @param {string} type - The type of content to render (e.g., 'buttons', 'image', 'video', 'carousel').\n * @param {function} [sendMessageCallback] - Callback for sending messages (e.g., for button clicks).\n * @returns {HTMLElement|null} The created HTML element or null if type is not recognized.\n */\nexport function renderMessage(messageData, type, sendMessageCallback = null) {\n  switch (type) {\n    case 'buttons':\n      return createButtons(messageData.buttons, sendMessageCallback);\n    case 'image':\n      return createImage(messageData.image);\n    case 'video':\n      return createVideo(messageData.video);\n    case 'carousel':\n      return createCarousel(messageData.carousel, sendMessageCallback);\n    default:\n      return null;\n  }\n}\n\n/**\n * Renders custom payload types.\n * @param {object} customPayload - The 'custom' object from the bot response.\n * @param {function} [sendMessageCallback] - Callback for sending messages (e.g., for form submissions).\n * @returns {HTMLElement|null} The created HTML element or null if no custom payload.\n */\nexport function renderCustomPayload(customPayload, sendMessageCallback = null) {\n    if (!customPayload) return null;\n\n    const customContainer = document.createElement('div');\n    customContainer.classList.add('chatbot-custom-payload');\n\n    if (customPayload.locations) {\n        const mapEl = createLocationsMap(customPayload.locations);\n        if (mapEl) customContainer.appendChild(mapEl);\n    }\n    if (customPayload.faq_list) {\n        const faqEl = createFaqList(customPayload.faq_list);\n        if (faqEl) customContainer.appendChild(faqEl);\n    }\n    if (customPayload.table) {\n        const tableEl = createTable(customPayload.table);\n        if (tableEl) customContainer.appendChild(tableEl);\n    }\n    if (customPayload.rating) {\n        const ratingEl = createRating(customPayload.rating, sendMessageCallback);\n        if (ratingEl) customContainer.appendChild(ratingEl);\n    }\n    if (customPayload.forms) {\n        const formEl = createDynamicForm(customPayload.forms, sendMessageCallback);\n        if (formEl) customContainer.appendChild(formEl);\n    }\n\n    return customContainer.children.length > 0 ? customContainer : null;\n}\n\n\n// --- Helper functions for specific message types ---\n\nfunction createButtons(buttons, sendMessageCallback) {\n  if (!buttons || buttons.length === 0) return null;\n  const container = document.createElement('div');\n  container.className = 'chatbot-button-container';\n\n  buttons.forEach(btn => {\n    const button = document.createElement('button');\n    button.textContent = btn.title;\n    if (btn.button_color) {\n        button.style.backgroundColor = btn.button_color;\n        button.style.color = 'white'; // Ensure text is visible\n        button.style.borderColor = btn.button_color;\n    }\n\n    if (btn.payload) {\n      button.addEventListener('click', () => {\n        // Prevent multiple clicks on buttons by disabling them after click\n        container.querySelectorAll('button').forEach(b => b.disabled = true);\n        if (sendMessageCallback) {\n            sendMessageCallback(btn.title, btn.payload);\n        }\n      });\n    } else if (btn.url) {\n      button.addEventListener('click', () => window.open(btn.url, '_blank'));\n    }\n    container.appendChild(button);\n  });\n  return container;\n}\n\nfunction createImage(imageUrl) {\n  if (!imageUrl) return null;\n  const img = document.createElement('img');\n  img.src = imageUrl;\n  img.className = 'chatbot-image';\n  return img;\n}\n\nfunction createVideo(videoUrl) {\n  if (!videoUrl) return null;\n  const video = document.createElement('video');\n  video.src = videoUrl;\n  video.controls = true;\n  video.className = 'chatbot-video';\n  return video;\n}\n\nfunction createCarousel(carouselItems, sendMessageCallback) {\n  if (!carouselItems || carouselItems.length === 0) return null;\n  const container = document.createElement('div');\n  container.className = 'chatbot-carousel-container';\n\n  carouselItems.forEach(item => {\n    const card = document.createElement('div');\n    card.className = 'chatbot-carousel-card';\n\n    if (item.image_url) {\n      const img = document.createElement('img');\n      img.src = item.image_url;\n      img.className = 'chatbot-carousel-card-image';\n      card.appendChild(img);\n    }\n\n    const content = document.createElement('div');\n    content.className = 'chatbot-carousel-card-content';\n\n    const title = document.createElement('h3');\n    title.className = 'chatbot-carousel-card-title';\n    title.textContent = item.title;\n    content.appendChild(title);\n\n    if (item.subtitle) {\n      const subtitle = document.createElement('p');\n      subtitle.className = 'chatbot-carousel-card-subtitle';\n      subtitle.textContent = item.subtitle;\n      content.appendChild(subtitle);\n    }\n\n    if (item.buttons && item.buttons.length > 0) {\n      const buttonsContainer = createButtons(item.buttons, sendMessageCallback);\n      if (buttonsContainer) content.appendChild(buttonsContainer);\n    }\n    card.appendChild(content);\n    container.appendChild(card);\n  });\n  return container;\n}\n\nfunction createLocationsMap(locations) {\n    if (!locations || locations.length === 0) return null;\n\n    const mapContainer = document.createElement('div');\n    mapContainer.className = 'chatbot-map-container';\n    mapContainer.style.width = '100%';\n    mapContainer.style.height = '300px';\n    mapContainer.style.borderRadius = '8px';\n    mapContainer.style.marginTop = '10px';\n    mapContainer.style.overflow = 'hidden';\n\n    // Placeholder for map - actual map rendering needs external library like Google Maps or Leaflet.\n    // For Google Maps, you'd typically need to load their API script and initialize.\n    // This example assumes Google Maps API is loaded via `loadScript` in `utils.js`\n    // and you have an API key.\n\n    // Example with Google Maps (requires API Key):\n    const API_KEY = 'YOUR_Maps_API_KEY'; // Replace with your actual API key\n    if (!API_KEY || API_KEY === 'YOUR_Maps_API_KEY') {\n        mapContainer.textContent = 'Map requires Google Maps API Key.';\n        mapContainer.style.backgroundColor = '#f8d7da';\n        mapContainer.style.color = '#721c24';\n        mapContainer.style.padding = '10px';\n        mapContainer.style.textAlign = 'center';\n        return mapContainer;\n    }\n\n    loadScript(`https://maps.googleapis.com/maps/api/js?key=${API_KEY}&callback=initChatbotMap`, 'google-maps-api')\n        .then(() => {\n            // Define global callback if not already\n            if (typeof window.initChatbotMap === 'undefined') {\n                window.initChatbotMap = () => {\n                    // This callback is called by Google Maps API once it's loaded\n                    // We need to re-trigger the map creation for any pending maps\n                    document.querySelectorAll('.chatbot-map-container[data-map-initialized=\"false\"]').forEach(el => {\n                        const mapLocations = JSON.parse(el.dataset.locations);\n                        createGoogleMapInstance(el, mapLocations);\n                    });\n                };\n            }\n            // If API is already loaded, callback might not fire, so check\n            if (typeof google !== 'undefined' && typeof google.maps !== 'undefined') {\n                 createGoogleMapInstance(mapContainer, locations);\n            }\n        })\n        .catch(error => console.error(\"Error loading Google Maps script:\", error));\n\n    // Store locations and initialization status for later use by global callback\n    mapContainer.setAttribute('data-map-initialized', 'false');\n    mapContainer.setAttribute('data-locations', JSON.stringify(locations));\n\n\n    function createGoogleMapInstance(mapElement, locs) {\n        if (mapElement.getAttribute('data-map-initialized') === 'true') {\n            return; // Already initialized\n        }\n        if (!locs || locs.length === 0) return;\n\n        const centerLat = locs.reduce((sum, l) => sum + l.lat, 0) / locs.length;\n        const centerLng = locs.reduce((sum, l) => sum + l.lng, 0) / locs.length;\n\n        const map = new google.maps.Map(mapElement, {\n            center: { lat: centerLat, lng: centerLng },\n            zoom: 10,\n        });\n\n        locs.forEach(loc => {\n            new google.maps.Marker({\n                position: { lat: loc.lat, lng: loc.lng },\n                map: map,\n                title: loc.name,\n                label: loc.label || loc.name[0],\n            });\n        });\n        mapElement.setAttribute('data-map-initialized', 'true');\n    }\n\n    return mapContainer;\n}\n\nfunction createFaqList(faqs) {\n    if (!faqs || faqs.length === 0) return null;\n    const container = document.createElement('div');\n    container.className = 'chatbot-faq-list-container';\n    container.style.marginTop = '10px';\n\n    faqs.forEach((faq, index) => {\n        const item = document.createElement('div');\n        item.className = 'chatbot-faq-item';\n\n        const question = document.createElement('div');\n        question.className = 'chatbot-faq-question';\n        question.textContent = faq.question;\n        item.appendChild(question);\n\n        const answer = document.createElement('div');\n        answer.className = 'chatbot-faq-answer';\n        answer.innerHTML = faq.answer; // Assuming answer can contain HTML/markdown already\n        item.appendChild(answer);\n\n        question.addEventListener('click', () => {\n            item.classList.toggle('expanded');\n        });\n        container.appendChild(item);\n    });\n    return container;\n}\n\nfunction createTable(tableData) {\n    if (!tableData || !tableData.headers || !tableData.rows) return null;\n\n    const container = document.createElement('div');\n    container.className = 'chatbot-table-container';\n\n    const table = document.createElement('table');\n    table.className = 'chatbot-table';\n\n    const thead = document.createElement('thead');\n    const headerRow = document.createElement('tr');\n    tableData.headers.forEach(headerText => {\n        const th = document.createElement('th');\n        th.textContent = headerText;\n        headerRow.appendChild(th);\n    });\n    thead.appendChild(headerRow);\n    table.appendChild(thead);\n\n    const tbody = document.createElement('tbody');\n    tableData.rows.forEach(rowData => {\n        const tr = document.createElement('tr');\n        rowData.forEach(cellData => {\n            const td = document.createElement('td');\n            td.textContent = cellData;\n            tr.appendChild(td);\n        });\n        tbody.appendChild(tr);\n    });\n    table.appendChild(tbody);\n\n    container.appendChild(table);\n    return container;\n}\n\nfunction createRating(ratingData, sendMessageCallback) {\n    if (!ratingData || !ratingData.scale) return null;\n\n    const container = document.createElement('div');\n    container.className = 'chatbot-rating-container';\n\n    const title = document.createElement('div');\n    title.className = 'chatbot-rating-title';\n    title.textContent = ratingData.title || 'Please rate:';\n    container.appendChild(title);\n\n    const starsContainer = document.createElement('div');\n    starsContainer.className = 'chatbot-stars';\n    let selectedRating = 0;\n\n    for (let i = ratingData.scale; i >= 1; i--) {\n        const star = document.createElement('span');\n        star.innerHTML = '&#9733;'; // Unicode star character\n        star.dataset.value = i;\n\n        star.addEventListener('mouseover', () => {\n            starsContainer.querySelectorAll('span').forEach(s => {\n                if (parseInt(s.dataset.value) >= i) {\n                    s.classList.add('hover');\n                } else {\n                    s.classList.remove('hover');\n                }\n            });\n        });\n\n        star.addEventListener('mouseout', () => {\n            starsContainer.querySelectorAll('span').forEach(s => s.classList.remove('hover'));\n        });\n\n        star.addEventListener('click', () => {\n            selectedRating = i;\n            starsContainer.querySelectorAll('span').forEach(s => {\n                if (parseInt(s.dataset.value) <= selectedRating) {\n                    s.classList.add('selected');\n                } else {\n                    s.classList.remove('selected');\n                }\n            });\n            if (sendMessageCallback) {\n                // Send the rating as a payload\n                sendMessageCallback(`Rated ${selectedRating} stars`, `/rate_service{\"rating\":${selectedRating}}`);\n            }\n        });\n        starsContainer.appendChild(star);\n    }\n    container.appendChild(starsContainer);\n    return container;\n}\n\nfunction createDynamicForm(formData, sendMessageCallback) {\n    if (!formData || !formData.fields || !formData.submit_payload) return null;\n\n    const container = document.createElement('div');\n    container.className = 'chatbot-form-container';\n\n    if (formData.title) {\n        const title = document.createElement('div');\n        title.className = 'chatbot-form-title';\n        title.textContent = formData.title;\n        container.appendChild(title);\n    }\n\n    const form = document.createElement('form');\n    form.addEventListener('submit', (e) => {\n        e.preventDefault();\n        const formValues = {};\n        formData.fields.forEach(field => {\n            const input = form.querySelector(`[name=\"${field.field_name}\"]`);\n            if (input) {\n                formValues[field.field_name] = input.value;\n            }\n        });\n\n        if (sendMessageCallback) {\n            // Construct a human-readable message for the user's bubble\n            const userMessageText = `Submitted form: ${Object.entries(formValues).map(([key, value]) => `${key}: ${value}`).join(', ')}`;\n            // Send the payload with form data\n            const submitPayload = `${formData.submit_payload}${JSON.stringify(formValues)}`;\n            sendMessageCallback(userMessageText, submitPayload);\n        }\n        // Optionally disable form after submission to prevent re-submission\n        form.querySelectorAll('input, select, button').forEach(el => el.disabled = true);\n    });\n\n    formData.fields.forEach(field => {\n        const fieldDiv = document.createElement('div');\n        fieldDiv.className = 'chatbot-form-field';\n\n        const label = document.createElement('label');\n        label.textContent = field.label;\n        label.htmlFor = `chatbot-form-${field.field_name}`;\n        fieldDiv.appendChild(label);\n\n        let inputElement;\n        if (field.type === 'select' && field.options) {\n            inputElement = document.createElement('select');\n            field.options.forEach(optionText => {\n                const option = document.createElement('option');\n                option.value = optionText;\n                option.textContent = optionText;\n                inputElement.appendChild(option);\n            });\n        } else {\n            inputElement = document.createElement('input');\n            inputElement.type = field.type;\n        }\n        inputElement.id = `chatbot-form-${field.field_name}`;\n        inputElement.name = field.field_name;\n        inputElement.placeholder = field.placeholder || '';\n        inputElement.required = field.required || false;\n\n        fieldDiv.appendChild(inputElement);\n        form.appendChild(fieldDiv);\n    });\n\n    const submitButton = document.createElement('button');\n    submitButton.type = 'submit';\n    submitButton.className = 'chatbot-form-submit-button';\n    submitButton.textContent = formData.submit_button_text || 'Submit';\n    form.appendChild(submitButton);\n\n    container.appendChild(form);\n    return container;\n}","function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","// src/chatbot.js\nimport './chatbot.css'; // Import CSS directly via Rollup PostCSS plugin\nimport { parseMarkdown, generateUniqueId, setLocalStorageItem, getLocalStorageItem } from './utils';\nimport { renderMessage, renderCustomPayload } from './renderer';\n\nclass ChatbotWidget {\n  constructor() {\n    this.config = {};\n    this.isOpen = false;\n    this.sessionId = null;\n    this.messages = [];\n    this.elements = {}; // Store references to key DOM elements\n  }\n\n  // --- Configuration & Initialization ---\n  initConfig(apiConfig = {}) {\n    const scriptTag = document.querySelector('script[src*=\"chatbot.bundle.js\"]');\n    let scriptConfig = {};\n\n    if (scriptTag) {\n      const configJson = scriptTag.getAttribute('chatbot-config');\n      if (configJson) {\n        try {\n          scriptConfig = JSON.parse(configJson);\n        } catch (e) {\n          console.error('Chatbot SDK: Invalid JSON in chatbot-config attribute', e);\n        }\n      }\n    }\n\n    // Merge script tag config with API config, giving API config higher precedence\n    // then apply defaults\n    this.config = {\n      ...scriptConfig,\n      ...apiConfig\n    };\n\n    // Apply defaults if not set by script tag or API\n    this.config.botUrl = this.config.botUrl || 'http://0.0.0.0:8000/chat';\n    this.config.themeColor = this.config.themeColor || '#020c15ff';\n    this.config.position = this.config.position || 'bottom-right';\n    this.config.botName = this.config.botName || 'Chatbot';\n\n    // Apply theme color\n    document.documentElement.style.setProperty('--chatbot-theme-color', this.config.themeColor);\n  }\n\n  initSession() {\n    this.sessionId = getLocalStorageItem('chatbot_session_id');\n    if (!this.sessionId) {\n      this.sessionId = generateUniqueId();\n      setLocalStorageItem('chatbot_session_id', this.sessionId);\n    }\n    this.messages = getLocalStorageItem(`chatbot_conversation_${this.sessionId}`) || [];\n  }\n\n  // --- UI Creation ---\n  createWidgetUI() {\n    const container = document.createElement('div');\n    container.id = 'chatbot-widget-container';\n    // Apply position class based on config\n    container.classList.add(`chatbot-position-${this.config.position}`);\n    // Initially hide the container, we'll reveal it with animation if needed\n    container.style.display = 'none'; // Start hidden\n    container.style.opacity = '0'; // For fade-in animation\n\n    document.body.appendChild(container);\n    this.elements.container = container;\n\n    // Chat Bubble\n    const bubble = document.createElement('div');\n    bubble.className = 'chatbot-bubble';\n    bubble.innerHTML = `\n      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"white\">\n        <path d=\"M20 2H4c-1.1 0-2 .9-2 2v18l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-2 12H6v-2h12v2zm0-3H6V9h12v2zm0-3H6V6h12v2z\"/>\n      </svg>\n    `;\n    bubble.addEventListener('click', () => this.toggleChatWindow());\n    container.appendChild(bubble);\n    this.elements.bubble = bubble;\n\n    // Chat Window\n    const windowEl = document.createElement('div');\n    windowEl.className = 'chatbot-window';\n    windowEl.innerHTML = `\n      <div class=\"chatbot-header\">\n        <span class=\"chatbot-header-title\">${this.config.botName}</span>\n        <button class=\"chatbot-header-close\">&times;</button>\n      </div>\n      <div class=\"chatbot-messages\"></div>\n      <div class=\"chatbot-input-area\">\n        <input type=\"text\" placeholder=\"Type your message...\" />\n        <button class=\"chatbot-send-button\">Send</button>\n      </div>\n    `;\n    container.appendChild(windowEl);\n    this.elements.window = windowEl;\n    this.elements.messagesContainer = windowEl.querySelector('.chatbot-messages');\n    this.elements.inputField = windowEl.querySelector('.chatbot-input-area input');\n    this.elements.sendButton = windowEl.querySelector('.chatbot-send-button');\n    this.elements.closeButton = windowEl.querySelector('.chatbot-header-close');\n\n    // Event Listeners\n    this.elements.closeButton.addEventListener('click', () => this.toggleChatWindow());\n    this.elements.sendButton.addEventListener('click', () => this.sendMessage());\n    this.elements.inputField.addEventListener('keypress', (event) => {\n      if (event.key === 'Enter') {\n        this.sendMessage();\n      }\n    });\n\n    // Render persisted messages\n    this.messages.forEach(msg => this.displayMessage(msg, false)); // Don't save again\n    this.scrollToBottom();\n\n    // Show the widget after creation, possibly with animation\n    this.showWidget();\n  }\n\n  showWidget() {\n    // Apply animation if specified in config, otherwise just show\n    const animation = this.config.appearanceAnimation || { type: 'fade-in', duration: 500 }; // Default animation\n\n    this.elements.container.style.display = 'block'; // Make it block before animation\n    if (animation.type === 'fade-in') {\n      this.elements.container.style.transition = `opacity ${animation.duration / 1000}s ease-in-out`;\n      setTimeout(() => { // Trigger reflow before applying opacity change for transition\n        this.elements.container.style.opacity = '1';\n      }, 50); // Small delay\n    } else {\n      this.elements.container.style.opacity = '1'; // Just show without transition\n    }\n  }\n\n  // --- UI State Management ---\n  toggleChatWindow() {\n    this.isOpen = !this.isOpen;\n    this.elements.window.classList.toggle('open', this.isOpen);\n    this.elements.bubble.classList.toggle('hidden', this.isOpen);\n    if (this.isOpen) {\n      this.elements.inputField.focus();\n      this.scrollToBottom();\n    }\n  }\n\n  // --- Message Handling (No change needed here from previous version) ---\n  displayMessage(message, save = true) {\n    const messageElement = document.createElement('div');\n    messageElement.classList.add('chatbot-message', message.sender === 'user' ? 'user' : 'bot');\n\n    if (message.text) {\n        const textContent = document.createElement('div');\n        textContent.innerHTML = parseMarkdown(message.text);\n        messageElement.appendChild(textContent);\n    }\n\n    if (message.buttons && message.buttons.length > 0) {\n      const buttonContainer = renderMessage(message, 'buttons', this.sendMessage.bind(this));\n      if (buttonContainer) messageElement.appendChild(buttonContainer);\n    }\n    if (message.image) {\n      const imageEl = renderMessage(message, 'image');\n      if (imageEl) messageElement.appendChild(imageEl);\n    }\n    if (message.video) {\n      const videoEl = renderMessage(message, 'video');\n      if (videoEl) messageElement.appendChild(videoEl);\n    }\n    if (message.carousel && message.carousel.length > 0) {\n        const carouselEl = renderMessage(message, 'carousel', this.sendMessage.bind(this));\n        if (carouselEl) messageElement.appendChild(carouselEl);\n    }\n    if (message.custom) {\n        const customEl = renderCustomPayload(message.custom, this.sendMessage.bind(this));\n        if (customEl) messageElement.appendChild(customEl);\n    }\n\n    this.elements.messagesContainer.appendChild(messageElement);\n    if (save) {\n      this.messages.push(message);\n      setLocalStorageItem(`chatbot_conversation_${this.sessionId}`, this.messages);\n    }\n    this.scrollToBottom();\n  }\n\n  async sendMessage(text = null, payload = null) {\n    let messageText = text || this.elements.inputField.value.trim();\n    if (!messageText && !payload) return;\n\n    const userMessage = { sender: 'user', text: messageText };\n    this.displayMessage(userMessage);\n    this.elements.inputField.value = '';\n\n    const requestBody = {\n      sender: this.sessionId,\n      message: messageText,\n      ...(payload && { customData: { payload: payload } })\n    };\n\n    try {\n      const response = await fetch(this.config.botUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(requestBody),\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const botResponses = await response.json();\n      if (botResponses && botResponses.length > 0) {\n        botResponses.forEach(botResponse => {\n            this.displayMessage({ sender: 'bot', ...botResponse });\n        });\n      } else {\n          this.displayMessage({ sender: 'bot', text: \"Sorry, I didn't get a response from the bot.\" });\n      }\n    } catch (error) {\n      console.error('Chatbot SDK: Error communicating with bot backend:', error);\n      this.displayMessage({ sender: 'bot', text: \"Sorry, I'm having trouble connecting right now. Please try again later.\" });\n    }\n  }\n\n  scrollToBottom() {\n    this.elements.messagesContainer.scrollTop = this.elements.messagesContainer.scrollHeight;\n  }\n\n  // --- Main Init Method ---\n  async init() {\n    // Initialize config from script tag first\n    this.initConfig();\n\n    // Check if an appearance API URL is provided\n    if (this.config.appearanceApiUrl) {\n      try {\n        console.log(`Chatbot SDK: Fetching appearance config from ${this.config.appearanceApiUrl}`);\n        const response = await fetch(this.config.appearanceApiUrl);\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const apiResponse = await response.json();\n\n        if (apiResponse.showChatbot) {\n          // Re-initialize config with API response, overriding script tag config\n          this.initConfig(apiResponse.initialConfig);\n          // Apply appearance animation settings if provided by API\n          if (apiResponse.appearanceAnimation) {\n              this.config.appearanceAnimation = apiResponse.appearanceAnimation;\n          }\n          this.initSession();\n          document.addEventListener('DOMContentLoaded', () => this.createWidgetUI());\n        } else {\n          console.log('Chatbot SDK: showChatbot is false from API. Not displaying widget.');\n        }\n      } catch (error) {\n        console.error('Chatbot SDK: Error fetching appearance configuration:', error);\n        // Decide fallback: hide chatbot or show with default config if API fails\n        // For now, if API fails, we won't show the chatbot.\n        console.log('Chatbot SDK: Not displaying widget due to API error.');\n      }\n    } else {\n      // If no appearance API URL, proceed with existing script tag config\n      console.log('Chatbot SDK: No appearance API URL provided. Displaying with script tag config.');\n      this.initSession();\n      document.addEventListener('DOMContentLoaded', () => this.createWidgetUI());\n    }\n  }\n}\n\n// Global initialization\nwindow.ChatbotSDK = new ChatbotWidget();\nwindow.ChatbotSDK.init();"],"names":["setLocalStorageItem","key","value","localStorage","setItem","JSON","stringify","e","console","warn","getLocalStorageItem","item","getItem","parse","renderMessage","messageData","type","sendMessageCallback","createButtons","buttons","imageUrl","img","document","createElement","src","className","createImage","image","videoUrl","video","controls","createVideo","carouselItems","length","container","forEach","card","image_url","appendChild","content","title","textContent","subtitle","buttonsContainer","createCarousel","carousel","renderCustomPayload","customPayload","customContainer","classList","add","locations","mapEl","mapContainer","style","width","height","borderRadius","marginTop","overflow","backgroundColor","color","padding","textAlign","createLocationsMap","faq_list","faqEl","faqs","faq","index","question","answer","innerHTML","addEventListener","toggle","createFaqList","table","tableEl","tableData","headers","rows","thead","headerRow","headerText","th","tbody","rowData","tr","cellData","td","createTable","rating","ratingEl","ratingData","scale","starsContainer","selectedRating","i","star","dataset","querySelectorAll","s","parseInt","remove","createRating","forms","formEl","formData","fields","submit_payload","form","preventDefault","formValues","field","input","querySelector","field_name","userMessageText","Object","entries","map","join","submitPayload","el","disabled","fieldDiv","label","inputElement","htmlFor","options","optionText","option","id","name","placeholder","required","submitButton","submit_button_text","createDynamicForm","children","btn","button","button_color","borderColor","payload","b","url","window","open","css","ref","insertAt","head","getElementsByTagName","firstChild","insertBefore","styleSheet","cssText","createTextNode","ChatbotSDK","constructor","this","config","isOpen","sessionId","messages","elements","initConfig","apiConfig","scriptTag","scriptConfig","configJson","getAttribute","error","botUrl","themeColor","position","botName","documentElement","setProperty","initSession","replace","c","r","Math","random","toString","createWidgetUI","display","opacity","body","bubble","toggleChatWindow","windowEl","messagesContainer","inputField","sendButton","closeButton","sendMessage","event","msg","displayMessage","scrollToBottom","showWidget","animation","appearanceAnimation","duration","transition","setTimeout","focus","message","save","messageElement","sender","text","html","parseMarkdown","buttonContainer","bind","imageEl","videoEl","carouselEl","custom","customEl","push","messageText","trim","userMessage","requestBody","customData","response","fetch","method","ok","Error","status","botResponses","json","botResponse","scrollTop","scrollHeight","init","appearanceApiUrl","log","apiResponse","showChatbot","initialConfig"],"mappings":"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"}